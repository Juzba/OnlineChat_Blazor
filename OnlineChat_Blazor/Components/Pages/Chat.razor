@page "/Chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@using System.Threading.Tasks
@implements IAsyncDisposable
@inject NavigationManager Navigation

<h3>Chat</h3>

<div class="chat">
	<div class="messages">

		@if(messages != null && messages.Count > 0)
		{
			foreach( var message in messages)
			{
				<div class="box">
					<p class="name">@users?.FirstOrDefault(p => p.Id == message.UserId)?.Name</p>
					<p class="time">@message.DateTime</p>
				</div>
				<p>@message.Text</p>
			}
		}

	</div>

	<form @onsubmit="OnSubmit" class="form">
		<div class="box">
			<input  placeholder="Name" class="inpName" type="text" @bind="userName"></input>
			<p>@infoText</p>
		</div>
		<textarea placeholder="Text" type="text" class="inpMessage" @bind="userText"></textarea>
		<button type="submit">Odeslat</button>

	</form>

</div>

@code {
	private HubConnection? hubConnection;
	List<Message>? messages;
	List<User>? users;
	string userName = "";
	string userText = "";
	string infoText = "";


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		OpenDB.LoadDB(ref messages, ref users);

		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
			.Build();

		hubConnection.On("RefreshChat", () =>
		{
			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("\n Signal Ir \n");
			OpenDB.LoadDB(ref messages, ref users);
			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();
	}

	async Task OnSubmit()
	{
		if(userName.Length > 2 && userName.Length < 20 && userText.Length > 0 && userText.Length < 200)
		{
			var message = new Message() {Id = 0, User = new User() {Id = 0, Name = userName }, DateTime = DateTime.Now, Text = userText };
			if (OpenDB.SaveDB(message))
			{
				infoText= "odesláno";
				userText = "";
				OpenDB.LoadDB(ref messages, ref users);
			}

			if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
			{
				await hubConnection.InvokeAsync("SendMessage");
			}
		}
		else
		{
			infoText = "Chybné parametry";
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection != null)
			await hubConnection.DisposeAsync();
	}

}


